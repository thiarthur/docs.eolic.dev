{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Eolic Documentation","text":"<p>Welcome to the Eolic documentation!</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Installation</li> <li>Usage</li> <li>API Reference</li> <li>Contributing</li> <li>License</li> </ol>"},{"location":"MIT_license/","title":"MIT license","text":"<p>MIT License</p> <p>Copyright (c) 2024 Thiago Goslar</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#eolic","title":"Eolic","text":""},{"location":"api_reference/#initialize-eolic-with-an-optional-list-of-remote-targets","title":"Initialize Eolic with an optional list of remote targets.","text":"<pre><code>__init__(self, remote_targets: List[Any]) -&gt; None\n</code></pre>"},{"location":"api_reference/#register-a-new-remote-target","title":"Register a new remote target.","text":"<pre><code>register_target(self, target: Any) -&gt; None\n</code></pre>"},{"location":"api_reference/#register-a-new-event-listener","title":"Register a new event listener.","text":"<pre><code>register_listener(self, event: Any, fn: Callable[..., None]) -&gt; None\n</code></pre>"},{"location":"api_reference/#decorator-to-register-an-event-listener","title":"Decorator to register an event listener.","text":"<pre><code>on(self, event: Any) -&gt; Callable\n</code></pre>"},{"location":"api_reference/#emit-an-event-to-all-registered-listeners-and-remote-targets","title":"Emit an event to all registered listeners and remote targets.","text":"<pre><code>emit(self, event: Any, *args, **kwargs) -&gt; None\n</code></pre>"},{"location":"api_reference/#eventremotetargethandler","title":"EventRemoteTargetHandler","text":""},{"location":"api_reference/#register-a-remote-target","title":"Register a remote target.","text":"<pre><code>register(self, target: Any) -&gt; None\n</code></pre>"},{"location":"api_reference/#emit-an-event-to-all-registered-remote-targets","title":"Emit an event to all registered remote targets.","text":"<pre><code>emit(self, event: Any, *args, **kwargs) -&gt; None\n</code></pre>"},{"location":"api_reference/#eventlistenerhandler","title":"EventListenerHandler","text":""},{"location":"api_reference/#register-a-new-event-listener_1","title":"Register a new event listener.","text":"<pre><code>register(self, event: Any, fn: Callable[..., None]) -&gt; None\n</code></pre>"},{"location":"api_reference/#dictionary-mapping-events-to-listeners","title":"Dictionary mapping events to listeners.","text":"<pre><code>_listener_map\n</code></pre>"},{"location":"api_reference/#eventremotedispatcherfactory","title":"EventRemoteDispatcherFactory","text":""},{"location":"api_reference/#create-an-appropriate-dispatcher-based-on-the-target-type","title":"Create an appropriate dispatcher based on the target type.","text":"<pre><code>create(self, target: EventRemoteTarget) -&gt; EventRemoteDispatcher\n</code></pre>"},{"location":"api_reference/#eventremoteurldispatcher","title":"EventRemoteURLDispatcher","text":""},{"location":"api_reference/#initialize-the-dispatcher-with-the-given-target","title":"Initialize the dispatcher with the given target.","text":"<pre><code>__init__(self, target: EventRemoteTarget) -&gt; None\n</code></pre>"},{"location":"api_reference/#dispatch-the-event-to-the-remote-target","title":"Dispatch the event to the remote target.","text":"<pre><code>dispatch(self, event: Any, *args, **kwargs) -&gt; None\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to Eolic! Here are some guidelines to help you get started.</p>"},{"location":"contributing/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork to your local machine:     <pre><code>git clone https://github.com/your-username/eolic.git\n</code></pre></li> <li>Navigate to the project directory:     <pre><code>cd eolic\n</code></pre></li> <li>Install the required dependencies:     <pre><code>poetry install\n</code></pre></li> </ol>"},{"location":"contributing/#coding-style","title":"Coding Style","text":"<p>We follow the PEP 8 coding style guide. Please make sure your code adheres to this standard.</p>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality. Install the pre-commit hooks with:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<ol> <li>Create a new branch for your feature or bug fix:     <pre><code>git checkout -b my-feature-branch\n</code></pre></li> <li>Make your changes.</li> <li>Commit your changes:     <pre><code>git commit -m \"Description of my feature\"\n</code></pre></li> <li>Push your branch to your fork on GitHub:     <pre><code>git push origin my-feature-branch\n</code></pre></li> <li>Open a pull request on GitHub.</li> </ol>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#for-usage","title":"For usage","text":"<p>To install Eolic just install using pip or other dependency manager</p> <pre><code>pip install eolic\n</code></pre>"},{"location":"installation/#for-development","title":"For development","text":"<p>Clone this repository and run, make sure to have poetry installed:</p> <pre><code>poetry install\n</code></pre> <p>You can also install the required dependencies using:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>Eolic is an event-driven library for Python that supports event emission, remote target handling, and listener registration with a simple and intuitive API.</p>"},{"location":"introduction/#key-features","title":"Key Features","text":"<ul> <li>Simple and intuitive API</li> <li>Supports multiple event targets including URL and Celery</li> <li>Listener registration and event emission</li> <li>Asynchronous event handling</li> </ul>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#initializing-eolic","title":"Initializing Eolic","text":"<p>To start using Eolic, create an instance of <code>Eolic</code> with an optional list of remote targets.</p> <pre><code>from eolic import Eolic\n\ndriver = Eolic(\n    remote_targets=[\n        {\"type\": \"url\", \"address\": \"https://webhook.site/test-url\", \"headers\": {\"X-Api-Key\":\"test\"}, \"events\": [\"ON_CONNECT\"]}\n    ]\n)\n</code></pre>"},{"location":"usage/#registering-event-listeners","title":"Registering Event Listeners","text":"<p>You can register event listeners using the <code>@driver.on</code> decorator.</p> <pre><code>@driver.on(\"ON_REGISTER\")\ndef register_event(*args, **kwargs):\n    print(\"Register Event\", args, kwargs)\n</code></pre> <p>You can also register listeners manually using the <code>register_listener</code> method.</p> <pre><code>def custom_listener(*args, **kwargs):\n    print(\"Custom Listener\", args, kwargs)\n\ndriver.register_listener(\"ON_CUSTOM_EVENT\", custom_listener)\n</code></pre>"},{"location":"usage/#emitting-events","title":"Emitting Events","text":"<p>Emit events using the <code>emit</code> method.</p> <pre><code>driver.emit(\"ON_REGISTER\", \"user_id\", \"user_email\", \"user_password\")\n</code></pre>"},{"location":"usage/#remote-targets","title":"Remote Targets","text":"<p>Eolic supports sending events to remote targets like webhooks. Define remote targets when initializing Eolic.</p> <pre><code>driver = Eolic(\n    remote_targets=[\n        {\"type\": \"url\", \"address\": \"https://webhook.site/test-url\", \"headers\": {\"X-Api-Key\":\"test\"}, \"events\": [\"ON_CONNECT\"]}\n    ]\n)\n</code></pre>"},{"location":"usage/#example-rpg-game","title":"Example: RPG Game","text":"<p>Here's an example of how to use Eolic in an RPG game context.</p>"},{"location":"usage/#define-your-events","title":"Define Your Events","text":"<pre><code>from enum import Enum\n\nclass GameEvents(Enum):\n    ON_PLAYER_JOIN = \"ON_PLAYER_JOIN\"\n    ON_PLAYER_ATTACK = \"ON_PLAYER_ATTACK\"\n    ON_MONSTER_DEFEATED = \"ON_MONSTER_DEFEATED\"\n    ON_GAME_OVER = \"ON_GAME_OVER\"\n</code></pre>"},{"location":"usage/#initialize-eolic","title":"Initialize Eolic","text":"<pre><code>from eolic import Eolic\n\ngame_event_handler = Eolic(remote_targets=[\n    {\"type\": \"url\", \"address\": \"https://webhook.site/test-url\", \"headers\": {\"X-Api-Key\":\"test\"}, \"events\": [GameEvents.ON_MONSTER_DEFEATED]}\n])\n</code></pre>"},{"location":"usage/#register-event-listeners","title":"Register Event Listeners","text":"<pre><code>@game_event_handler.on(GameEvents.ON_PLAYER_JOIN)\ndef handle_player_join(player_name):\n    print(f\"{player_name} has joined the game!\")\n\n@game_event_handler.on(GameEvents.ON_PLAYER_ATTACK)\ndef handle_player_attack(player_name, monster_name, damage):\n    print(f\"{player_name} attacked {monster_name} for {damage} damage!\")\n\n@game_event_handler.on(GameEvents.ON_MONSTER_DEFEATED)\ndef handle_monster_defeated(player_name, monster_name):\n    print(f\"{player_name} has defeated {monster_name}!\")\n\n@game_event_handler.on(GameEvents.ON_GAME_OVER)\ndef handle_game_over():\n    print(\"Game Over! Thanks for playing.\")\n</code></pre>"},{"location":"usage/#emit-events","title":"Emit Events","text":"<pre><code># Emitting player join event\ngame_event_handler.emit(GameEvents.ON_PLAYER_JOIN, \"Archer\")\n\n# Emitting player attack event\ngame_event_handler.emit(GameEvents.ON_PLAYER_ATTACK, \"Archer\", \"Goblin\", 30)\n\n# Emitting monster defeated event\ngame_event_handler.emit(GameEvents.ON_MONSTER_DEFEATED, \"Archer\", \"Goblin\")\n\n# Emitting game over event\ngame_event_handler.emit(GameEvents.ON_GAME_OVER)\n</code></pre>"},{"location":"usage/#integrations","title":"Integrations","text":""},{"location":"usage/#how-it-works","title":"How it works","text":"<p>Our integration system is responsible for triggering our handler functions from other apps in your ecosystem (most useful for microservices architecture).</p> <p></p> <p>For now, we only support FastAPI Integration. However, you can write any integration using the Integration abstract class.</p> <p>It's on our roadmap to create more integrations.</p>"},{"location":"usage/#fastapi","title":"FastAPI","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>To use the FastAPI integration, you need to install the necessary dependencies. You can install them using pip:</p> <pre><code>pip install eolic[fastapi]\n</code></pre>"},{"location":"usage/#initialization","title":"Initialization","text":"<p>Here's how you can initialize a FastAPI app and the Eolic FastAPI integration:</p> <pre><code>from fastapi import FastAPI\nfrom eolic import Eolic\nfrom eolic.integrations.fastapi_integration import FastAPIIntegration\n\n# Create an instance of FastAPI\napp = FastAPI()\n\n# Create an instance of Eolic\neolic = Eolic()\n</code></pre>"},{"location":"usage/#setup","title":"Setup","text":"<p>Calling the setup method adds a route with the default path <code>/event</code>.</p> <pre><code># Create an instance of FastAPIIntegration\nfastapi_integration = FastAPIIntegration(app, event_route=\"/my-custom-event-route\")\n\n# Set up the integration\neolic.setup_integration(fastapi_integration)\n\n@eolic.on(\"my-event\")\ndef my_event_handler(*args, **kwargs):\n    print(\"My event received with\")\n    print(\"ARGS:\")\n    print(args)\n    print(\"KWARGS:\")\n    print(kwargs)\n</code></pre> <p>It's done! Now, any event with the name <code>my-event</code> emitted from another app with an Eolic instance that contains a <code>url</code> remote target as type and <code>http://host/my-custom-event-route</code> as address will trigger the <code>my_event_handler</code> handler.</p>"}]}